/*
 * This class controls
 *		- Creating a bg image for the credits screen.
 *		- Rolling credits.
 *
 * Original @author D. Green.
 *
 * © D. Green. 2020.
 */

// INCLUDES.
#include "Credits.h"
#include "Level.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CONSTRUCTOR/S & DESTRUCTOR.
Credits::Credits(sf::RenderWindow* hwnd, Input* in, GameState* gs, AudioManager* aud) : Screen(hwnd, in, gs, aud)
{
	initCreditsBg();

	// Set where the view is originally.
	originalViewPos = *Level::getView();
	xTranslation = 0;

	creditsRolled = false;
}

Credits::~Credits()
{

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FUNCTIONS.
void Credits::handleInput(float dt)
{

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Credits::update(float dt)
{
	if (!creditsRolled)
	{
		// Update the view to its most recent location.
		sf::View currentViewPos = *Level::getView();

		// Figure out how much it's moved by in the x-range.
		xTranslation = currentViewPos.getCenter().x - originalViewPos.getCenter().x;

		// Scroll credits up, ensuring that any offset of how much the view has moved is added so the credits are still centred on screen.
		creditsBg.setPosition(sf::Vector2f(creditsBg.getPosition().x + xTranslation, creditsBg.getPosition().y - (100 * dt)));

		creditsBg.setVelocity(sf::Vector2f(0, -100));
	}

	bottomOfCreditsPos = creditsBg.getPosition().y + creditsBg.getSize().y;
	rollCredits(dt);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Credits::render()
{
	beginDraw();
	window->draw(creditsBg);
	endDraw();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Credits::beginDraw()
{
	window->clear(sf::Color(0, 0, 0));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Credits::endDraw()
{
	window->display();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Credits::initAudio()
{

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Load in and set values for the credtis bg image.
void Credits::initCreditsBg()
{
	if (!creditsBgTexture.loadFromFile("gfx/credits/credits.png"))
	{
		std::cerr << "Sorry could not load credits image!\n";
	}

	creditsBg.setSize(sf::Vector2f(861.6f, 1671));
	creditsBg.setOrigin(sf::Vector2f(creditsBg.getSize().x / 2.0f, 0));
	creditsBg.setPosition(sf::Vector2f(window->getSize().x / 2.0f, window->getSize().y / 2.0f));
	creditsBg.setTexture(&creditsBgTexture);

	bottomOfCreditsPos = creditsBg.getOrigin().y + creditsBg.getSize().y;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Roll the credtis up the screen.
void Credits::rollCredits(float & dt)
{
	creditsRolled = true;

	creditsBg.setPosition(sf::Vector2f(creditsBg.getPosition().x, creditsBg.getPosition().y + (creditsBg.getVelocity().y * dt)));

	if (bottomOfCreditsPos < 0)
	{
		window->close();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////