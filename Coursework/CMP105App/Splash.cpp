// INCLUDES.
#include "Splash.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// CONSTRUCTOR/S & DESTRUCTOR.
Splash::Splash(sf::RenderWindow* hwnd, Input* in, GameState* gs, AudioManager* aud) : Screen(hwnd, in, gs, aud)
{
	splashDelay = 0;
	waitForLogo = 0;
	fadedIn = false;
	fadedOut = false;
	switchedStates = false;

	setGameState(State::SPLASH);

	initSplashBackground();
	initTransFadeRect();
	initAudio();
}

Splash::~Splash()
{

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FUNCTIONS.
void Splash::handleInput(float dt)
{
	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::update(float dt)
{
	if (audio->getMusic()->getStatus() == sf::SoundSource::Stopped)
	{
		audio->playMusicbyName("splash");
	}

	splashDelay += dt;
	waitForLogo += dt;

	if (fadedOut)
	{
		setGameState(State::MENU);
		switchedStates = true;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::render()
{
	beginDraw();

	fadeIn();

	// If we've faded in, it's time to fade out to black.
	if (fadedIn && !switchedStates)
	{
		fadeOut();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::beginDraw()
{
	//window->clear(sf::Color(255, 253, 208));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::endDraw()
{
	window->display();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::initSplashBackground()
{
	if (!splashLogoTexture.loadFromFile("gfx/screens/polymorphic.png"))
	{
		std::cerr << "Sorry could not load menu background image!\n";
	}

	splashBg.setSize(sf::Vector2f(378, 378));
	splashBg.setOrigin(splashBg.getSize().x / 2.0f, splashBg.getSize().y / 2.0f);
	splashBg.setPosition(sf::Vector2f(window->getSize().x / 2.0f, window->getSize().y / 2.0f));
	splashBg.setTexture(&splashLogoTexture);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::initTransFadeRect()
{
	transFade.setSize(sf::Vector2f(window->getSize().x, window->getSize().y));
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::initAudio()
{
	audio->addMusic("sfx/splash/splash_intro.ogg", "splash");
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::fadeIn()
{
	// After 2 secs fade in logo splash screen
	if (splashDelay > 2 && !fadedIn)
	{
		float decrAlpha = 255;

		while (decrAlpha > 0)
		{
			// Controls the speed of fade.
			decrAlpha -= 0.05f;

			transFade.setFillColor(sf::Color(255, 253, 208, decrAlpha));
			window->draw(splashBg);
			window->draw(transFade);
			endDraw();

			if (decrAlpha < 1)
			{
				fadedIn = true;
				splashDelay = 0;
			}
		}
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void Splash::fadeOut()
{
	float incrAlpha = 0;

	while (incrAlpha < 255)
	{
		// Controls the speed of fade.
		incrAlpha += 0.05f;

		transFade.setFillColor(sf::Color(255, 253, 208, incrAlpha));
		window->draw(splashBg);
		window->draw(transFade);
		endDraw();

		if (incrAlpha > 253)
		{
			fadedOut = true;
			break;
		}
	}	
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////